# File .github/workflows/repository-update.yml
# DESCRIPTION: repos cannot use ORGANIZATION's secrets/vars on the free organization plan
#              as is a workaround, this action sync's repo secrets with a list of repositories
# ${secrets.MADBUILDS_TEMPLATE_SECRETS_SYNC_PAT} - required to have "repo" access for USER_PAT token

on:
  workflow_dispatch:

env:
  OWNER_NAME: "madbuilds"
  REPOSITORIES: >
    \"app-logging\",
    \"sbot\" \

jobs:
  setup:
    if: ${{ startsWith(github.repository, 'madbuilds/template-') }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.project }}
    steps:
      - name: Setup
        id: matrix
        run: |
          echo "project=[ ${{ env.REPOSITORIES }} ]" >> $GITHUB_OUTPUT

  update:
    needs:
      - setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJSON(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: update variables
        env:
          GITHUB_TOKEN: ${{ secrets.USER_PAT_FULL }}
        run: |
          gh variable set TEST_VAR --body "Set from workflow" --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}

      - name: update secrets
        env:
          GITHUB_TOKEN: ${{ secrets.USER_PAT_FULL }}
        run: |
          # CREATE PRODUCTION  -   DEPLOYMENT ENV (IF NOT EXIST)
          ENVIRONMENT_NAME=PRODUCTION
          if gh api repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/environments/${ENVIRONMENT_NAME} --jq '.name' >/dev/null 2>&1; then
            echo "${ENVIRONMENT_NAME}: environment already exist"
          else
            echo "${ENVIRONMENT_NAME}: creating environment"
            gh api --method PUT \
              -H "Accept: application/vnd.github+json" \
              repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/environments/${ENVIRONMENT_NAME}
            echo ""
          fi
          # API CALL - https://docs.github.com/ru/rest/deployments/environments?#create-or-update-an-environment
          # GET USER ID: https://api.github.com/users/{USERNAME}
          echo "${ENVIRONMENT_NAME}: set rules - reviewers"
          gh api --method PUT \
            -H "Accept: application/vnd.github.v3+json" \
            repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/environments/${ENVIRONMENT_NAME} \
            -f "reviewers[][type]=User" -F "reviewers[][id]=11288889"
          echo ""
          echo "${ENVIRONMENT_NAME}: set secrets (SSH)"
          gh secret set MADBUILDS_SSH_PRIVATE_HOST  --env ${ENVIRONMENT_NAME} --body ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_HOST }}  --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SSH_PRIVATE_PORT  --env ${ENVIRONMENT_NAME} --body ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_PORT }}  --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SSH_PRIVATE_USER  --env ${ENVIRONMENT_NAME} --body ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_USER }}  --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SSH_PRIVATE_KEY   --env ${ENVIRONMENT_NAME} --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }} < <(cat <<EOF
          ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_KEY }}
          EOF
          )
          
          # CREATE TEST        -   DEPLOYMENT ENV (IF NOT EXIST)
          ENVIRONMENT_NAME=TEST
          if gh api repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/environments/${ENVIRONMENT_NAME} --jq '.name' >/dev/null 2>&1; then
            echo "${ENVIRONMENT_NAME}: environment already exist"
          else
            echo "${ENVIRONMENT_NAME}: creating environment"
            gh api --method PUT \
              -H "Accept: application/vnd.github+json" \
              repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/environments/${ENVIRONMENT_NAME}
            echo ""
          fi
          echo "${ENVIRONMENT_NAME}: set secrets (SSH)"
          gh secret set MADBUILDS_SSH_PRIVATE_HOST  --env ${ENVIRONMENT_NAME} --body ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_HOST }}  --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SSH_PRIVATE_PORT  --env ${ENVIRONMENT_NAME} --body ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_PORT }}  --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SSH_PRIVATE_USER  --env ${ENVIRONMENT_NAME} --body ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_USER }}  --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SSH_PRIVATE_KEY   --env ${ENVIRONMENT_NAME} --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }} < <(cat <<EOF
          ${{ secrets.MADBUILDS_SSH_DEV_PRIVATE_KEY }}
          EOF
          )
          
          # SYNC_APP AUTHORIZATION DETAILS SECRETS
          echo "REPOSITORY: set secrets (sync)"
          gh secret set MADBUILDS_SYNCAPP_APP_ID        --body ${{ secrets.MADBUILDS_SYNCAPP_APP_ID }}        --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SYNCAPP_CLIENT_ID     --body ${{ secrets.MADBUILDS_SYNCAPP_CLIENT_ID }}     --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SYNCAPP_CLIENT_SECRET --body ${{ secrets.MADBUILDS_SYNCAPP_CLIENT_SECRET }} --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }}
          gh secret set MADBUILDS_SYNCAPP_PRIVATE_KEY   --repo https://github.com/${{ env.OWNER_NAME }}/${{ matrix.project }} < <(cat <<EOF
          ${{ secrets.MADBUILDS_SYNCAPP_PRIVATE_KEY }}
          EOF
          )

      - name: init repository
        env:
          GITHUB_TOKEN: ${{ secrets.USER_PAT_FULL }}
        run: |
          WORKFLOW_NAME="repository-init.yml"
          
          echo "CHECK all workflows list"
          WORKFLOW_LIST=$(gh workflow list --json id,state,path --repo ${{ env.OWNER_NAME }}/${{ matrix.project }})
          echo "Workflow list: ${WORKFLOW_LIST}"
          
          if [[ "$WORKFLOW_LIST" == *"${WORKFLOW_NAME}"* ]]; then
            echo "workflow exist - running: ${WORKFLOW_NAME}"
            gh workflow run "${WORKFLOW_NAME}" --repo ${{ env.OWNER_NAME }}/${{ matrix.project }} --ref master
          else
            echo "INITIALIZED: Workflow '$WORKFLOW_NAME' does not exist"
            echo "INITIALIZED: Repository already been initialized"
          fi

      - name: master branch protection
        env:
          GITHUB_TOKEN: ${{ secrets.USER_PAT_FULL }}
        run: |
          BRANCH_NAME="master"
          RULE_NAME="[RULE] ${BRANCH_NAME}"
          
          echo "Check if rule exist... ${RULE_NAME}"
          EXISTING_RULES=$(gh api \
            -H "Accept: application/vnd.github.v3+json" \
            repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/rulesets \
          )
          RULE_ID=$(echo $EXISTING_RULES | jq -r ".[] | select(.name==\"$RULE_NAME\") | .id")
          REQUEST_METHOD=POST
          
          if [ ! -z "$RULE_ID" ]; then
            echo "Rule already exist with name: ${RULE_NAME}, updating: ${RULE_ID}"
            REQUEST_METHOD=PUT
          else
            echo "Rule needs to be created for: ${RULE_NAME}, creating"
            RULE_ID=""
          fi
          
          PROTECTION_RULE_PULL_REQUEST=$(cat <<-'EOF'
          {
            "type": "pull_request",
            "parameters": {
              "dismiss_stale_reviews": true,
              "required_approving_review_count": 1,
              "require_last_push_approval": true,
              "require_code_owner_review": false,
              "bypass_restrictions": {
                "users": [],
                "teams": [],
                "apps": []
              }
            }
          }
          EOF
          )
          PROTECTION_RULE_DELETION=$(cat <<-'EOF'
          {
            "type": "deletion",
            "parameters": {}
          }
          EOF
          )
          PROTECTION_RULE_STATUS_CHECKS=$(cat <<-'EOF'
          {
            "type": "required_status_checks",
            "parameters": {
              "strict_required_status_checks_policy": true,
              "required_status_checks": ["build"]
            }
          }
          EOF
          )
          PROTECTION_RULE_SIGNATURE=$(cat <<-'EOF'
          {
            "type": "required_signatures",
            "parameters": {}
          }
          EOF
          )
          PROTECTION_RULE_NO_FAST_FORWARD=$(cat <<-'EOF'
          {
            "type": "non_fast_forward",
            "parameters": {}
          }
          EOF
          )
          PROTECTION_RULE_MERGE_QUEUE=$(cat <<-'EOF'
          {
            "type": "update",
            "parameters": {
              "update_allows_fetch_and_merge": true
            }
          }
          EOF
          )
    
          echo '{
            "name": "$RULE_NAME",
            "target": "branch",
            "enforcement": "active",
            "bypass_actors": [
              {
                "actor_id": 1,
                "actor_type": "Repository",
                "bypass_mode": "always"
              }
            ],
            "conditions": {
              "ref_name": {
                "include": ["~DEFAULT_BRANCH"],
                "exclude": []
              }
            },
            "rules": {
              "creation": false,
              "update": true,
              "deletion": true,
              "required_linear_history": false,
              "required_signatures": true,
              "required_status_checks": null,
              "required_pull_request": {
                "required_approving_review_count": 1,
                "dismiss_stale_reviews": true,
                "require_code_owner_review": false,
                "require_last_push_approval": true,
                "required_review_thread_resolution": false
              },
              "merge_queue": null,
              "non_fast_forward": true,
              "pull_request": {
                "dismiss_stale_reviews": true,
                "require_code_owner_review": false,
                "required_approving_review_count": 1,
                "required_review_thread_resolution": false,
                "require_last_push_approval": true
              }
            }
          }' | gh api --method ${REQUEST_METHOD} \
            -H "Accept: application/vnd.github.v3+json" \
            repos/${{ env.OWNER_NAME }}/${{ matrix.project }}/rulesets/${RULE_ID} \
            --input -
          
          #  -f conditions[ref_name][include][patterns][]="refs/heads/${BRANCH_NAME}" \
          #  -f conditions[ref_name][exclude][patterns]=[] \
          #  -f rules[]="${PROTECTION_RULE_PULL_REQUEST}" \
          #  -f rules[]="${PROTECTION_RULE_DELETION}" \
          #  -f rules[]="${PROTECTION_RULE_SIGNATURE}" \
          #  -f rules[]="${PROTECTION_RULE_NO_FAST_FORWARD}"
